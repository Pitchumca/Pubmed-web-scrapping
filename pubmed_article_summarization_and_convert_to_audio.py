# -*- coding: utf-8 -*-
"""Pubmed article summarization and convert to audio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n7r-zDmr0UoEakeVzH2U-TtEtxx8Azdo
"""

!pip install transformers datasets accelerate -U

from datasets import load_dataset

dataset = load_dataset("medical_questions_pairs")

from transformers import AutoTokenizer, AutoModelForSequenceClassification

tokenizer = AutoTokenizer.from_pretrained("microsoft/BiomedNLP-BiomedBERT-base-uncased-abstract-fulltext")
model = AutoModelForSequenceClassification.from_pretrained("microsoft/BiomedNLP-BiomedBERT-base-uncased-abstract-fulltext", num_labels=2)  # Adjust `num_labels` as needed

!pip install transformers datasets requests

import requests

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

# Example search query
article_ids = search_pubmed("machine learning in healthcare")
print(article_ids)

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

# Fetch abstracts
abstracts = fetch_abstracts(article_ids)
print(abstracts)

from transformers import pipeline

# Initialize the summarization pipeline
summarizer = pipeline("summarization", model="facebook/bart-large-cnn")

def summarize_abstracts(abstracts):
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

# Get the summary
summary = summarize_abstracts(abstracts)
print(summary)

import requests
from transformers import pipeline

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

def summarize_abstracts(abstracts):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

# Example usage
query = "machine learning in healthcare"
article_ids = search_pubmed(query)
abstracts = fetch_abstracts(article_ids)
summary = summarize_abstracts(abstracts)
print(summary)

!pip install ipywidgets



import ipywidgets as widgets
from IPython.display import display, HTML
import requests
from transformers import pipeline

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

def summarize_abstracts(abstracts):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

def on_button_clicked(b):
    query = text.value
    with out:
        out.clear_output()
        print("Searching PubMed...")
        article_ids = search_pubmed(query)
        print(f"Found {len(article_ids)} articles.")
        abstracts = fetch_abstracts(article_ids)
        if abstracts:
            print("Summarizing abstracts...")
            summary = summarize_abstracts(abstracts)
            print("Summary:")
            print(summary)
        else:
            print("No abstracts found.")

# Create a text input widget
text = widgets.Text(
    value='',
    placeholder='Enter your search query',
    description='Query:',
    disabled=False
)

# Create a button widget
button = widgets.Button(
    description='Search',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Search PubMed',
    icon='search' # (FontAwesome names without the `fa-` prefix)
)

# Output widget
out = widgets.Output()

# Set the button click event
button.on_click(on_button_clicked)

# Display the widgets
display(text, button, out)

!pip install gTTS pydub

import ipywidgets as widgets
from IPython.display import display, Audio
import requests
from transformers import pipeline
from gtts import gTTS
from pydub import AudioSegment
import io

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

def summarize_abstracts(abstracts):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

def text_to_speech(text):
    tts = gTTS(text)
    audio_fp = io.BytesIO()
    tts.write_to_fp(audio_fp)
    audio_fp.seek(0)
    return audio_fp

def on_button_clicked(b):
    query = text.value
    with out:
        out.clear_output()
        print("Searching PubMed...")
        article_ids = search_pubmed(query)
        print(f"Found {len(article_ids)} articles.")
        abstracts = fetch_abstracts(article_ids)
        if abstracts:
            print("Summarizing abstracts...")
            summary = summarize_abstracts(abstracts)
            print("Summary:")
            print(summary)

            print("Converting summary to audio...")
            audio_fp = text_to_speech(summary)
            audio_segment = AudioSegment.from_file(audio_fp, format="mp3")
            audio_segment.export("summary_audio.mp3", format="mp3")
            display(Audio("summary_audio.mp3", autoplay=True))

            print("Please enter a question based on the summary:")
            question_widget = widgets.Text(
                value='',
                placeholder='Enter your question here',
                description='Question:',
                disabled=False
            )
            ask_button = widgets.Button(description='Ask', disabled=False, button_style='', tooltip='Ask the question', icon='question')

            def on_ask_button_clicked(a):
                with out:
                    print("Generating answer...")
                    qa_pipeline = pipeline("question-answering")
                    question = question_widget.value
                    answer = qa_pipeline(question=question, context=summary)
                    print(f"Q: {question}")
                    print(f"A: {answer['answer']}")

            ask_button.on_click(on_ask_button_clicked)
            display(question_widget, ask_button)
        else:
            print("No abstracts found.")

# Create a text input widget
text = widgets.Text(
    value='',
    placeholder='Enter your search query',
    description='Query:',
    disabled=False
)

# Create a button widget
button = widgets.Button(
    description='Search',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Search PubMed',
    icon='search' # (FontAwesome names without the `fa-` prefix)
)

# Output widget
out = widgets.Output()

# Set the button click event
button.on_click(on_button_clicked)

# Display the widgets
display(text, button, out)

import ipywidgets as widgets
from IPython.display import display, Audio
import requests
from transformers import pipeline
from gtts import gTTS
from pydub import AudioSegment
import io

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

def summarize_abstracts(abstracts):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

def text_to_speech(text):
    tts = gTTS(text)
    audio_fp = io.BytesIO()
    tts.write_to_fp(audio_fp)
    audio_fp.seek(0)
    return audio_fp

def on_button_clicked(b):
    query = text.value
    with out:
        out.clear_output()
        print("Searching PubMed...")
        article_ids = search_pubmed(query)
        print(f"Found {len(article_ids)} articles.")
        abstracts = fetch_abstracts(article_ids)
        if abstracts:
            print("Summarizing abstracts...")
            summary = summarize_abstracts(abstracts)
            print("Summary:")
            print(summary)

            print("Converting summary to audio...")
            audio_fp = text_to_speech(summary)
            audio_segment = AudioSegment.from_file(audio_fp, format="mp3")
            audio_segment.export("summary_audio.mp3", format="mp3")
            display(Audio("summary_audio.mp3", autoplay=True))

            print("Please enter a question based on the summary:")
            question_widget = widgets.Text(
                value='',
                placeholder='Enter your question here',
                description='Question:',
                disabled=False
            )
            ask_button = widgets.Button(description='Ask', disabled=False, button_style='', tooltip='Ask the question', icon='question')

            def on_ask_button_clicked(a):
                with out:
                    print("Generating answer...")
                    qa_pipeline = pipeline("question-answering")
                    question = question_widget.value
                    answer = qa_pipeline(question=question, context=summary)
                    print(f"Q: {question}")
                    print(f"A: {answer['answer']}")

            ask_button.on_click(on_ask_button_clicked)
            display(question_widget, ask_button)
        else:
            print("No abstracts found.")

# Create a text input widget
text = widgets.Text(
    value='',
    placeholder='Enter your search query',
    description='Query:',
    disabled=False
)

# Create a button widget
button = widgets.Button(
    description='Search',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Search PubMed',
    icon='search' # (FontAwesome names without the `fa-` prefix)
)

# Output widget
out = widgets.Output()

# Set the button click event
button.on_click(on_button_clicked)

# Display the widgets
display(text, button, out)

import ipywidgets as widgets
from IPython.display import display, Audio
import requests
from transformers import pipeline
from gtts import gTTS
from pydub import AudioSegment
import io

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

def summarize_abstracts(abstracts):
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

def text_to_speech(text):
    tts = gTTS(text)
    audio_fp = io.BytesIO()
    tts.write_to_fp(audio_fp)
    audio_fp.seek(0)
    return audio_fp

def on_button_clicked(b):
    query = text.value
    with out:
        out.clear_output()
        print("Searching PubMed...")
        article_ids = search_pubmed(query)
        print(f"Found {len(article_ids)} articles.")
        abstracts = fetch_abstracts(article_ids)
        if abstracts:
            print("Summarizing abstracts...")
            summary = summarize_abstracts(abstracts)
            print("Summary:")
            print(summary)

            print("Converting summary to audio...")
            audio_fp = text_to_speech(summary)
            audio_segment = AudioSegment.from_file(audio_fp, format="mp3")
            audio_segment.export("summary_audio.mp3", format="mp3")
            display(Audio("summary_audio.mp3", autoplay=True))

            print("Please enter a question based on the summary:")
            ask_button = widgets.Button(description='Ask', disabled=False, button_style='',
                                        tooltip='Ask the question', icon='question')
            question_widget = widgets.Text(
                value='',
                placeholder='Enter your question here',
                description='Question:',
                disabled=False
            )

            display(question_widget, ask_button)
            def on_ask_button_clicked(a):
                with out:
                    print("Generating answer...")
                    qa_pipeline = pipeline("question-answering")
                    question = question_widget.value
                    answer = qa_pipeline(question=question, context=summary)
                    print(f"Q: {question}")
                    print(f"A: {answer['answer']}")

            ask_button.on_click(on_ask_button_clicked)

        else:
            print("No abstracts found.")

# Create a text input widget
text = widgets.Text(
    value='',
    placeholder='Enter your search query',
    description='Query:',
    disabled=False
)

# Create a button widget
button = widgets.Button(
    description='Search',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Search PubMed',
    icon='search' # (FontAwesome names without the `fa-` prefix)
)

# Output widget
out = widgets.Output()

# Set the button click event
button.on_click(on_button_clicked)

# Display the widgets
display(text, button, out)

!pip install transformers datasets requests gtts
!pip install pydub ipywidgets

import ipywidgets as widgets
from IPython.display import display, Audio, clear_output
import requests
from transformers import pipeline
from gtts import gTTS
from pydub import AudioSegment
import io
import torch

def search_pubmed(query):
    url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=pubmed&term={query}&retmode=json"
    response = requests.get(url)
    data = response.json()
    return data['esearchresult']['idlist']

def fetch_abstracts(article_ids):
    abstracts = []
    for article_id in article_ids:
        url = f"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esummary.fcgi?db=pubmed&id={article_id}&retmode=json"
        response = requests.get(url)
        data = response.json()
        try:
            abstract = data['result'][article_id]['title'] + " " + data['result'][article_id]['source']
            abstracts.append(abstract)
        except KeyError:
            continue
    return abstracts

def summarize_abstracts(abstracts):
    device = 0 if torch.cuda.is_available() else -1
    summarizer = pipeline("summarization", model="facebook/bart-large-cnn", device=device)
    combined_abstracts = " ".join(abstracts)
    summary = summarizer(combined_abstracts, max_length=512, min_length=30, do_sample=False)
    return summary[0]['summary_text']

def text_to_speech(text):
    tts = gTTS(text)
    audio_fp = io.BytesIO()
    tts.write_to_fp(audio_fp)
    audio_fp.seek(0)
    return audio_fp

def on_button_clicked(b):
    query = text.value
    with out:
        clear_output()
        print("Searching PubMed...")
        article_ids = search_pubmed(query)
        print(f"Found {len(article_ids)} articles.")
        abstracts = fetch_abstracts(article_ids)
        if abstracts:
            print("Summarizing abstracts...")
            summary = summarize_abstracts(abstracts)
            print("Summary:")
            print(summary)

            print("Converting summary to audio...")
            audio_fp = text_to_speech(summary)
            audio_segment = AudioSegment.from_file(audio_fp, format="mp3")
            audio_segment.export("summary_audio.mp3", format="mp3")
            display(Audio("summary_audio.mp3", autoplay=True))

            print("Please enter a question based on the summary:")
            question_widget = widgets.Text(
                value='',
                placeholder='Enter your question here',
                description='Question:',
                disabled=False
            )
            ask_button = widgets.Button(description='Ask', disabled=False, button_style='', tooltip='Ask the question', icon='question')

            def on_ask_button_clicked(a):
                with out:
                    clear_output(wait=True)
                    print("Generating answer...")
                    device = 0 if torch.cuda.is_available() else -1
                    qa_pipeline = pipeline("question-answering", device=device)
                    question = question_widget.value
                    answer = qa_pipeline(question=question, context=summary)
                    print(f"Q: {question}")
                    print(f"A: {answer['answer']}")
                    display(question_widget, ask_button)

            ask_button.on_click(on_ask_button_clicked)
            display(question_widget, ask_button)
        else:
            print("No abstracts found.")

# Create a text input widget
text = widgets.Text(
    value='',
    placeholder='Enter your search query',
    description='Query:',
    disabled=False
)

# Create a button widget
button = widgets.Button(
    description='Search',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Search PubMed',
    icon='search' # (FontAwesome names without the `fa-` prefix)
)

# Output widget
out = widgets.Output()

# Set the button click event
button.on_click(on_button_clicked)

# Display the widgets
display(text, button, out)

